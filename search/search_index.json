{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to E-Recycler","text":""},{"location":"#features","title":"Features","text":"<p>E-Recycler is a free marketplace api for refurbished tech. Currently supporting smartphones and laptops.</p> <ul> <li>100% compliance with REST specifications</li> <li>Fully fledged jwt authentication (as a standlaone reusable service)</li> <li>CRUD operations on:<ul> <li>Products</li> <li>Users</li> </ul> </li> </ul>"},{"location":"#future-works","title":"Future works","text":"<ul> <li> CRUD Shopping Cart operations<ul> <li> Pay API integration</li> </ul> </li> <li> Search by:<ul> <li> manufacturer</li> <li> category</li> <li> user</li> </ul> </li> </ul>"},{"location":"#installation","title":"Installation","text":"<p>Click here and follow this steps to start and build the app.</p>"},{"location":"installation/","title":"Installation","text":"<p>This section will guide you through the deployment process.</p> <p>The deployment relise heavly on Docker (more below);</p>"},{"location":"installation/#requirements","title":"Requirements","text":"<ul> <li>Docker<ul> <li>docker-compose</li> </ul> </li> <li>Git</li> </ul>"},{"location":"installation/#clone-the-repo","title":"Clone the repo","text":"<p>Use git to clone the repository:</p> <pre><code>git clone https://github.com/edoardovicenzi/s2i-e-recycler.git\n</code></pre> <p>Then navigate inside the directory:</p> <pre><code>cd s2i-e-recycler\n</code></pre>"},{"location":"installation/#project-structure","title":"Project Structure","text":"<p>There are 3 main directories and the root folder serves as the main entry point of all.</p>"},{"location":"installation/#authentication","title":"Authentication","text":"<p>This is a standalone service so that it ca be reused. It handles all JWT operations.</p> <p>It is located in the <code>auth/</code> directory.</p>"},{"location":"installation/#backend","title":"Backend","text":"<p>This is the actual API service to be exposed to the public. It handles all the operations of e-recycler.</p> <p>It is located in the <code>backend/</code> directory.</p>"},{"location":"installation/#documentation","title":"Documentation","text":"<p>This documentation is located in the <code>docs/</code> folder and is deployed on every change.</p>"},{"location":"installation/#setting-environmental-variables","title":"Setting Environmental variables","text":"<p>This step is NOT recommended for production, instead pass the envirnomental variables at runtime. If you intend to deploy the production version, skip this section now.</p> <p>Before starting you will need to set environmental variables, we do this by creating <code>.env</code> files.</p> <ul> <li>Create a <code>.env</code> file in the root directoy</li> </ul> <p>Feel free to change the ports if they are already used up.</p> <p>In the root directory create a <code>.env</code> file and set the content to the following:</p> <pre><code>DB_AUTH_ROOT_PASSWORD=secret\nDB_AUTH_USER=auth\nDB_AUTH_USER_PASSWORD=verysecurepassword\nDB_AUTH_DATABASE_NAME=auth\nAUTH_PORT=\"5000\"\nDB_AUTH_PORT=\"5050\"\n\n\nDB_E_RECYCLER_ROOT_PASSWORD=secret\nDB_E_RECYCLER_USER=recycler\nDB_E_RECYCLER_USER_PASSWORD=verysecurepassword\nDB_E_RECYCLER_DATABASE_NAME=e_recycler\nE_RECYCLER_PORT=\"4000\"\nDB_E_RECYCLER_PORT=\"4050\"\n\nACCESS_TOKEN_SECRET=38d595b5d456f27901b3ed100948b3394cdf3a529fa2ad2d29601e0b69dd7c2c2412bb27679b0d3b75606d3b7ffaa01d0ff9de09a5e241b6033400dfac5c985b\nREFRESH_TOKEN_SECRET=4947d226f75a2393705a514b4b7cf7fdbbbdade06d92b586f3d08a7eb34ce3c00208814053ad526bd0f76983d7a3f2f794fa5725eec227e9c7def6b7750cb51a\nACCESS_TOKEN_TIMEOUT=\"24h\"\n</code></pre> <p>Considerations: - ACCESS_TOKEN_SECRET and REFRESH_TOKEN_SECRET are used to create the token secrets if you want to change them MAKE SURE TO SAVE THEM SOMEWHERE. Loosing them would invalidate all present tokens. - ACCESS_TOKEN_TIMEOUT is how much a token will remain valid, default is 24h, you can change it to minutes (e.g. \"15m\") or to seconds (e.g. \"30s\") - For the database connection we will leverage docker networks</p>"},{"location":"installation/#running-the-stack","title":"Running the stack","text":"<p>Now that everything is ready you may open a terminal and navigate to the root folder of the project and launch:</p> <pre><code>docker compose up -d\n</code></pre> <p>If everything went well you should see something similar to this:</p> <pre><code>[+] Running 5/5\n \u2714 Network e-recycler_e-recycler-net  Created                                                                                                                                                                0.2s\n \u2714 Container e-recycler-db-auth-1     Started                                                                                                                                                                1.2s\n \u2714 Container e-recycler-db-app-1      Started                                                                                                                                                                1.2s\n \u2714 Container auth_api                 Started                                                                                                                                                                1.5s\n \u2714 Container e_recycler_api           Started                                                                                                                                                                1.6s\n</code></pre> <p>Congratulations! You are now ready to use e-recycler API!</p> <p>You may now start making calls to: <code>http://localhost:E_RECYCLER_PORT</code> where E_RECYCLER_PORT has been set in the .env file.</p> <p>See the full reference here.</p>"},{"location":"installation/#uninstalling","title":"Uninstalling","text":"<p>Open a terminal and navigate to the project root folder, then execute:</p> <pre><code>docker compose down\n</code></pre> <p>The images will still be there so you can remove them with: WARNING: this removes EVERY unused image, not only the e-recycler ones.</p> <pre><code>docker images prune --all\n</code></pre>"},{"location":"reference/","title":"API Reference","text":"<p>This is a comprehensive guide of all the endpoints currently supported.</p>"},{"location":"reference/#authentication","title":"Authentication","text":"<p>To make each and every call to the api endpoints you will first need to authenticate. This will give you two JSON Web Tokens: the <code>authToken</code> and the <code>refreshToken</code>.</p> <p>All API calls (authentication excluded) will need the <code>authToken</code> to be provided on every request header like so:</p> <pre><code>Authorization: Bearer authToken\n</code></pre> <p>Where <code>authToken</code> is provided during authentication.</p> <p>By default every token expires after 24h.</p> <p>When an <code>authToken</code> expires you will use the <code>refreshToken</code> to generate a new one. It is therefore imperative to not loose the refresh token.</p> <p>In the eventuality that you loose the <code>refreshToken</code> you may recover it by logging in again through the <code>/recover</code> endpoint (see below).</p>"},{"location":"reference/#register","title":"<code>/register</code>","text":"<p>This endpoint creates and stores a new user and return both the <code>authToken</code> and the <code>refreshToken</code>.</p>"},{"location":"reference/#post","title":"POST","text":"<p>Set the content type header to json:</p> <pre><code>Content-Type: application/json\n</code></pre> <p>Then send a both the email and a password as the body of the request. The email must be unique, failing to do so will return a status code <code>409</code>.</p> <pre><code>{\n    email: string,\n    password: string\n}\n</code></pre> <p>Will respond with:</p> <pre><code>{\n    authToken: string,\n    refreshToken: string\n}\n</code></pre> <p>Reference table:</p> field required? email yes password yes"},{"location":"reference/#token","title":"<code>/token</code>","text":"<p>Given a valid <code>refreshToken</code> will return a new <code>authToken</code>.</p>"},{"location":"reference/#post_1","title":"POST","text":"<p>Set the content type header to json:</p> <pre><code>Content-Type: application/json\n</code></pre> <p>Then send your <code>refreshToken</code> in the body of the request like so:</p> <pre><code>{\n    token: string,\n}\n</code></pre> <p>Will respond with:</p> <pre><code>{\n    authToken: string,\n}\n</code></pre> <p>Reference table:</p> field required? token yes"},{"location":"reference/#logout","title":"<code>/logout</code>","text":"<p>Given a valid <code>refreshToken</code> will return a new <code>authToken</code>.</p>"},{"location":"reference/#delete","title":"DELETE","text":"<p>Set the content type header to json:</p> <pre><code>Content-Type: application/json\n</code></pre> <p>Then send your <code>refreshToken</code> in the body of the request like so:</p> <pre><code>{\n    token: string\n}\n</code></pre> <p>Will respond with a simple <code>200</code> status code.</p> <p>Reference table:</p> field required? token yes"},{"location":"reference/#recover","title":"<code>/recover</code>","text":"<p>Given a valid email and password combination returns a new set of <code>authToken</code> and <code>refreshToken</code>.</p>"},{"location":"reference/#post_2","title":"POST","text":"<p>Set the content type header to json:</p> <pre><code>Content-Type: application/json\n</code></pre> <p>Then send a both the email and a password as the body of the request. The email-password combination must exists and be valid.</p> <pre><code>{\n    email: string,\n    password: string\n}\n</code></pre> <p>Will respond with:</p> <pre><code>{\n    authToken: string,\n    refreshToken: string\n}\n</code></pre> <p>Reference table:</p> field required? email yes password yes"},{"location":"reference/#categories","title":"Categories","text":""},{"location":"reference/#categories_1","title":"<code>/categories</code>","text":""},{"location":"reference/#get","title":"GET","text":"<p>Returns all the available categories.</p> <p>Set the authorization header to:</p> <pre><code>Authorization: Bearer authToken\n</code></pre> <p>Where <code>authToken</code> is the generated token during authentication.</p> <p>Will respond with:</p> <pre><code>{\n    id: number,\n    name: string\n}\n</code></pre>"},{"location":"reference/#categoriesid","title":"<code>/categories/:id</code>","text":"<p>Where <code>:id</code> is a <code>number</code>.</p>"},{"location":"reference/#get_1","title":"GET","text":"<p>Returns a specific category matching the specific id.</p> <p>Set the authorization header to:</p> <pre><code>Authorization: Bearer authToken\n</code></pre> <p>Where <code>authToken</code> is the generated token during authentication.</p> <p>Will respond with:</p> <pre><code>{\n    id: number,\n    name: string\n}\n</code></pre>"},{"location":"reference/#manufacturers","title":"Manufacturers","text":""},{"location":"reference/#manufacturers_1","title":"<code>/manufacturers</code>","text":""},{"location":"reference/#get_2","title":"GET","text":"<p>Returns all the available manufacturers.</p> <p>Set the authorization header to:</p> <pre><code>Authorization: Bearer authToken\n</code></pre> <p>Where <code>authToken</code> is the generated token during authentication.</p> <p>Will respond with:</p> <pre><code>{\n    id: number,\n    name: string\n}\n</code></pre>"},{"location":"reference/#manufacturersid","title":"<code>/manufacturers/:id</code>","text":"<p>Where <code>:id</code> is a <code>number</code>.</p>"},{"location":"reference/#get_3","title":"GET","text":"<p>Returns a specific manufacturer matching the specific id.</p> <p>Set the authorization header to:</p> <pre><code>Authorization: Bearer authToken\n</code></pre> <p>Where <code>authToken</code> is the generated token during authentication.</p> <p>Will respond with:</p> <pre><code>{\n    id: number,\n    name: string\n}\n</code></pre>"},{"location":"reference/#products","title":"Products","text":""},{"location":"reference/#products_1","title":"<code>/products</code>","text":""},{"location":"reference/#post_3","title":"POST","text":"<p>Creates a product and publishes it for anyone to see.</p> <p>Set the following headers:</p> <p><pre><code>Authorization: Bearer authToken\nContent-Type: application/json\n</code></pre> Where <code>authToken</code> is the generated token during authentication.</p> <p>Then set the body of the request as follows:</p> <pre><code>{\n    category: {\n        id: number,\n        name: string,\n    },\n    manufacturer: {\n        id: number,\n        name: string,\n    },\n    name: string,\n    price: string,\n    gpu: string,\n    cpu: string,\n    keyboardLayout: string,\n    display: string,\n    ram: string,\n    drives: string,\n    memory: string,\n    storage: string,\n    ports: string,\n    webcam: string,\n}\n</code></pre> field required? category.id yes category.name yes manufacturer.id yes manufacturer.name yes name yes price yes gpu yes cpu yes keyboardLayout yes display yes ram yes drives yes memory yes storage yes ports yes webcam no <p>On success will respond with a status <code>200</code>.</p>"},{"location":"reference/#get_4","title":"GET","text":"<p>Returns all the available products.</p> <p>Set the authorization header to:</p> <pre><code>Authorization: Bearer authToken\n</code></pre> <p>Where <code>authToken</code> is the generated token during authentication.</p> <p>Will respond with a list of products, each with the following structure:</p> <pre><code>{\n    id: number,\n    user: {\n        id: number,\n        email: string,\n    },\n    category: {\n        id: number,\n        name: string,\n    },\n    manufacturer: {\n        id: number,\n        name: string,\n    },\n    name: string,\n    price: string,\n    gpu: string,\n    cpu: string,\n    keyboardLayout: string,\n    display: string,\n    ram: string,\n    drives: string,\n    memory: string,\n    storage: string,\n    ports: string,\n    webcam: string,\n}\n</code></pre>"},{"location":"reference/#productsid","title":"<code>/products/:id</code>","text":"<p>Where <code>:id</code> is a <code>number</code>.</p>"},{"location":"reference/#get_5","title":"GET","text":"<p>Returns a specific product matching the specific id.</p> <p>Set the authorization header to:</p> <pre><code>Authorization: Bearer authToken\n</code></pre> <p>Where <code>authToken</code> is the generated token during authentication.</p> <p>On success will respond with:</p> <pre><code>{\n    id: number,\n    user: {\n        id: number,\n        email: string,\n    },\n    category: {\n        id: number,\n        name: string,\n    },\n    manufacturer: {\n        id: number,\n        name: string,\n    },\n    name: string,\n    price: string,\n    gpu: string,\n    cpu: string,\n    keyboardLayout: string,\n    display: string,\n    ram: string,\n    drives: string,\n    memory: string,\n    storage: string,\n    ports: string,\n    webcam: string,\n}\n</code></pre>"},{"location":"reference/#delete_1","title":"DELETE","text":"<p>Deletes specific product matching the specific id.</p> <p>WARNING: only the owner of the product may use this endpoint!</p> <p>Set the authorization header to:</p> <pre><code>Authorization: Bearer authToken\n</code></pre> <p>Where <code>authToken</code> is the generated token during authentication.</p> <p>On success will respond with a status code of <code>200</code>.</p>"},{"location":"reference/#put","title":"PUT","text":"<p>Updates a specific product matching the specific id.</p> <p>WARNING: only the owner of the product may use this endpoint!</p> <p>Set the following headers:</p> <p><pre><code>Authorization: Bearer authToken\nContent-Type: application/json\n</code></pre> Where <code>authToken</code> is the generated token during authentication.</p> <p>Then set the body of the request as follows:</p> <pre><code>{\n    category: {\n        id: number,\n        name: string,\n    },\n    manufacturer: {\n        id: number,\n        name: string,\n    },\n    name: string,\n    price: string,\n    gpu: string,\n    cpu: string,\n    keyboardLayout: string,\n    display: string,\n    ram: string,\n    drives: string,\n    memory: string,\n    storage: string,\n    ports: string,\n    webcam: string,\n}\n</code></pre> field required? category.id yes category.name yes manufacturer.id yes manufacturer.name yes name yes price yes gpu yes cpu yes keyboardLayout yes display yes ram yes drives yes memory yes storage yes ports yes webcam no"},{"location":"reference/#productsidprop","title":"<code>/products/:id/:prop</code>","text":"<p>Where <code>:id</code> is a <code>number</code> and <code>:prop</code> is a <code>string</code>.</p>"},{"location":"reference/#get_6","title":"GET","text":"<p>Returns a specific product's property matching the specific prop name.</p> <p>Set the authorization header to:</p> <pre><code>Authorization: Bearer authToken\n</code></pre> <p>Where <code>authToken</code> is the generated token during authentication.</p> <p>On success will respond with the plain data or object.</p> <p>Currently supports only one layer deep queries.</p>"}]}